# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ai_interface_pb2 as ai__interface__pb2


class AnalyServiceStub(object):
    """The ai analysis service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddCamera = channel.unary_unary(
                '/ai_analysis.AnalyService/AddCamera',
                request_serializer=ai__interface__pb2.CameraInfo.SerializeToString,
                response_deserializer=ai__interface__pb2.CameraResult.FromString,
                )
        self.DelCamera = channel.unary_unary(
                '/ai_analysis.AnalyService/DelCamera',
                request_serializer=ai__interface__pb2.CameraId.SerializeToString,
                response_deserializer=ai__interface__pb2.CameraResult.FromString,
                )
        self.GetFrames = channel.unary_unary(
                '/ai_analysis.AnalyService/GetFrames',
                request_serializer=ai__interface__pb2.PreProcessingData.SerializeToString,
                response_deserializer=ai__interface__pb2.ProcessedData.FromString,
                )


class AnalyServiceServicer(object):
    """The ai analysis service definition.
    """

    def AddCamera(self, request, context):
        """Sends a add camera
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelCamera(self, request, context):
        """Sends a delete camera
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFrames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCamera,
                    request_deserializer=ai__interface__pb2.CameraInfo.FromString,
                    response_serializer=ai__interface__pb2.CameraResult.SerializeToString,
            ),
            'DelCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.DelCamera,
                    request_deserializer=ai__interface__pb2.CameraId.FromString,
                    response_serializer=ai__interface__pb2.CameraResult.SerializeToString,
            ),
            'GetFrames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFrames,
                    request_deserializer=ai__interface__pb2.PreProcessingData.FromString,
                    response_serializer=ai__interface__pb2.ProcessedData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_analysis.AnalyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AnalyService(object):
    """The ai analysis service definition.
    """

    @staticmethod
    def AddCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_analysis.AnalyService/AddCamera',
            ai__interface__pb2.CameraInfo.SerializeToString,
            ai__interface__pb2.CameraResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_analysis.AnalyService/DelCamera',
            ai__interface__pb2.CameraId.SerializeToString,
            ai__interface__pb2.CameraResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_analysis.AnalyService/GetFrames',
            ai__interface__pb2.PreProcessingData.SerializeToString,
            ai__interface__pb2.ProcessedData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
